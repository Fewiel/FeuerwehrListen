@page "/admin/change-password"
@using FeuerwehrListen.Services
@using FeuerwehrListen.Components.Layout
@inject AuthenticationService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Passwort ändern - Admin</PageTitle>

<AdminAuthCheck>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <div class="card">
                <div class="card-header">
                    <h3>Passwort ändern</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(_message))
                    {
                        <div class="alert @(_isError ? "alert-danger" : "alert-success")">
                            @_message
                        </div>
                    }

                    <div class="mb-3">
                        <label class="form-label">Aktuelles Passwort</label>
                        <input type="password" class="form-control" @bind="_oldPassword" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Neues Passwort</label>
                        <input type="password" class="form-control" @bind="_newPassword" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Neues Passwort bestätigen</label>
                        <input type="password" class="form-control" @bind="_confirmPassword" />
                    </div>
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" @onclick="HandleChangePassword">Passwort ändern</button>
                        <button class="btn btn-secondary" @onclick='() => Navigation.NavigateTo("/")'>Zurück</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

</AdminAuthCheck>

@code {
    private string _oldPassword = string.Empty;
    private string _newPassword = string.Empty;
    private string _confirmPassword = string.Empty;
    private string _message = string.Empty;
    private bool _isError = false;

    protected override void OnInitialized()
    {
        if (!AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
        }
    }

    private async Task HandleChangePassword()
    {
        _message = string.Empty;
        _isError = false;

        if (string.IsNullOrWhiteSpace(_oldPassword) || string.IsNullOrWhiteSpace(_newPassword))
        {
            _message = "Bitte alle Felder ausfüllen.";
            _isError = true;
            return;
        }

        if (_newPassword != _confirmPassword)
        {
            _message = "Die neuen Passwörter stimmen nicht überein.";
            _isError = true;
            return;
        }

        if (_newPassword.Length < 4)
        {
            _message = "Das neue Passwort muss mindestens 4 Zeichen lang sein.";
            _isError = true;
            return;
        }

        var success = await AuthService.ChangePasswordAsync(_oldPassword, _newPassword);
        if (success)
        {
            _message = "Passwort erfolgreich geändert!";
            _oldPassword = string.Empty;
            _newPassword = string.Empty;
            _confirmPassword = string.Empty;
        }
        else
        {
            _message = "Das aktuelle Passwort ist falsch.";
            _isError = true;
        }
    }
}

