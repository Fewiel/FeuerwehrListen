@page "/admin/statistics"
@using FeuerwehrListen.Models
@using FeuerwehrListen.Services
@using FeuerwehrListen.Components.Layout
@using FeuerwehrListen.Components.Shared
@inject StatisticsService StatsService
@inject PdfExportService PdfService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Statistiken - Admin</PageTitle>

<AdminAuthCheck>

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col">
            <h1>üìä Statistiken & Auswertungen</h1>
            <p class="text-muted">√úbersicht √ºber Teilnahmequoten, Trends und Leistungsindikatoren</p>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="ExportStatisticsPdf">
                <i class="bi bi-file-earmark-pdf"></i> PDF-Export
            </button>
        </div>
    </div>

    @if (_loading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">L√§dt...</span>
            </div>
            <p class="mt-2">Statistiken werden berechnet...</p>
        </div>
    }
    else
    {
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-primary">@_listStats.TotalLists</h5>
                        <p class="card-text">Gesamt Listen</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-success">@_listStats.OpenLists</h5>
                        <p class="card-text">Offene Listen</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-info">@_listStats.AverageParticipants</h5>
                        <p class="card-text">√ò Teilnehmer</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-warning">@_listStats.TotalParticipants</h5>
                        <p class="card-text">Gesamt Teilnahmen</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">üèÜ Top Teilnehmer</h5>
                    </div>
                    <div class="card-body">
                        @if (_topParticipants.Count == 0)
                        {
                            <p class="text-muted">Keine Daten verf√ºgbar</p>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>#</th>
                                            <th>Name</th>
                                            <th>Teilnahmen</th>
                                            <th>Anteil</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var (participant, index) in _topParticipants.Select((p, i) => (p, i)))
                                        {
                                            <tr>
                                                <td>@(index + 1)</td>
                                                <td>
                                                    <strong>@participant.MemberName</strong>
                                                    <br><small class="text-muted">@participant.MemberNumber</small>
                                                </td>
                                                <td>@participant.ParticipationCount</td>
                                                <td>
                                                    <ProgressBar Value="@participant.Percentage" Color="@GetProgressBarColor(participant.Percentage)" />
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">üöí Fahrzeug-Nutzung</h5>
                    </div>
                    <div class="card-body">
                        @if (_vehicleStats.Count == 0)
                        {
                            <p class="text-muted">Keine Daten verf√ºgbar</p>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Fahrzeug</th>
                                            <th>Eins√§tze</th>
                                            <th>√ò Besatzung</th>
                                            <th>Anteil</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var vehicle in _vehicleStats.Take(5))
                                        {
                                            <tr>
                                                <td><strong>@vehicle.VehicleName</strong></td>
                                                <td>@vehicle.UsageCount</td>
                                                <td>@vehicle.AverageCrew.ToString("F1")</td>
                                                <td>
                                                    <ProgressBar Value="@vehicle.UsagePercentage" Color="#dc3545" />
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">üë• Funktionen-Verteilung</h5>
                    </div>
                    <div class="card-body">
                        @if (_functionStats.Count == 0)
                        {
                            <p class="text-muted">Keine Daten verf√ºgbar</p>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Funktion</th>
                                            <th>Anzahl</th>
                                            <th>Anteil</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var func in _functionStats)
                                        {
                                            <tr>
                                                <td><strong>@func.FunctionName</strong></td>
                                                <td>@func.Count</td>
                                                <td>
                                                    <ProgressBar Value="@func.Percentage" Color="#0dcaf0" />
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">ü´Å Unter Atemschutz</h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-6">
                                <h3 class="text-warning">@_breathingStats.WithApparatus</h3>
                                <p class="mb-0">Unter Atemschutz</p>
                            </div>
                            <div class="col-6">
                                <h3 class="text-secondary">@_breathingStats.WithoutApparatus</h3>
                                <p class="mb-0">Ohne Atemschutz</p>
                            </div>
                        </div>
                        <hr>
                        <ProgressBar Value="@_breathingStats.WithApparatusPercentage" 
                                     Color="#ffc107" 
                                     Height="30px" 
                                     FontSize="14px"
                                     CustomLabel="@($"{_breathingStats.WithApparatusPercentage:F1}% unter Atemschutz")" />
                    </div>
                </div>
            </div>

            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">üè∑Ô∏è Stichwort-Verwendung</h5>
                    </div>
                    <div class="card-body">
                        @if (_keywordStats.Count == 0)
                        {
                            <p class="text-muted">Keine Stichwort-Daten verf√ºgbar</p>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Stichwort</th>
                                            <th>Eins√§tze</th>
                                            <th>Erf√ºllung</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var keyword in _keywordStats.Take(5))
                                        {
                                            <tr>
                                                <td><strong>@keyword.KeywordName</strong></td>
                                                <td>@keyword.UsageCount</td>
                                                <td>
                                                    @if (keyword.OperationsWithRequirements > 0)
                                                    {
                                                        <ProgressBar Value="@keyword.RequirementsFulfillmentRate" 
                                                                     Color="@GetRequirementsColor(keyword.RequirementsFulfillmentRate)" />
                                                        <small class="text-muted">@keyword.RequirementsFulfillmentRate.ToString("F1")%</small>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">Keine Requirements</span>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">‚úÖ Personal Requirements Status</h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center mb-3">
                            <div class="col-4">
                                <h4 class="text-primary">@_requirementsStats.TotalOperations</h4>
                                <small class="text-muted">Gesamt Eins√§tze</small>
                            </div>
                            <div class="col-4">
                                <h4 class="text-info">@_requirementsStats.OperationsWithRequirements</h4>
                                <small class="text-muted">Mit Requirements</small>
                            </div>
                            <div class="col-4">
                                <h4 class="@GetRequirementsStatusColor(_requirementsStats.RequirementsFulfillmentRate)">@_requirementsStats.RequirementsFulfillmentRate.ToString("F1")%</h4>
                                <small class="text-muted">Erf√ºllungsrate</small>
                            </div>
                        </div>
                        <hr>
                        <div class="mb-3">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span><strong>Gesamt-Erf√ºllungsrate</strong></span>
                                <span class="badge @GetRequirementsBadgeClass(_requirementsStats.RequirementsFulfillmentRate)">
                                    @_requirementsStats.RequirementsFulfillmentRate.ToString("F1")%
                                </span>
                            </div>
                            <ProgressBar Value="@_requirementsStats.RequirementsFulfillmentRate" 
                                         Color="@GetRequirementsColor(_requirementsStats.RequirementsFulfillmentRate)" 
                                         Height="25px" />
                        </div>
                        @if (_requirementsStats.KeywordSummaries.Any())
                        {
                            <h6 class="mb-2">Top Stichw√∂rter:</h6>
                            <div class="row">
                                @foreach (var keyword in _requirementsStats.KeywordSummaries.Take(3))
                                {
                                    <div class="col-12 mb-2">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span>@keyword.KeywordName</span>
                                            <div class="d-flex align-items-center">
                                                <span class="me-2">@keyword.FulfillmentRate.ToString("F0")%</span>
                                                <ProgressBar Value="@keyword.FulfillmentRate" 
                                                             Color="@GetRequirementsColor(keyword.FulfillmentRate)" 
                                                             Height="15px" />
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">üìã Einsatz-√úbersicht</h5>
                        <div>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="PreviousPage" disabled="@(_currentPage == 0)">
                                <i class="bi bi-chevron-left"></i> Zur√ºck
                            </button>
                            <span class="mx-2">Seite @(_currentPage + 1) / @_totalPages</span>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="NextPage" disabled="@(_currentPage >= _totalPages - 1)">
                                Weiter <i class="bi bi-chevron-right"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (_opCompositionData.Any())
                        {
                            var pagedOperations = _opCompositionData
                                .OrderByDescending(o => o.OperationNumber)
                                .Skip(_currentPage * _pageSize)
                                .Take(_pageSize)
                                .ToList();

                            @foreach (var op in pagedOperations)
                            {
                                var isExpanded = _expandedOperations.Contains(op.OperationNumber);
                                <div class="card mb-3">
                                    <div class="card-header" style="cursor: pointer;" @onclick="() => ToggleOperation(op.OperationNumber)">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <strong>@op.OperationNumber</strong>
                                                @if (!string.IsNullOrEmpty(op.Keyword))
                                                {
                                                    <span class="ms-2 text-muted">| @op.Keyword</span>
                                                }
                                                @if (!string.IsNullOrEmpty(op.Address))
                                                {
                                                    <span class="ms-2 text-muted">| @op.Address</span>
                                                }
                                            </div>
                                            <div class="d-flex align-items-center">
                                                <span class="badge bg-primary me-2">@op.TotalParticipants Teilnehmer</span>
                                                <i class="bi @(isExpanded ? "bi-chevron-up" : "bi-chevron-down")"></i>
                                            </div>
                                        </div>
                                    </div>
                                    @if (isExpanded)
                                    {
                                        <div class="card-body">
                                            @if (op.FunctionCounts.Any(f => f.Value > 0) || op.WithVehicleTruppCount > 0)
                                            {
                                                <h6 class="mb-3">Funktionen (mit Fahrzeug):</h6>
                                                <div class="row">
                                                    @foreach (var func in op.FunctionCounts.Where(f => f.Value > 0).OrderByDescending(f => f.Value))
                                                    {
                                                        <div class="col-md-6 mb-2">
                                                            <div class="d-flex justify-content-between align-items-center">
                                                                <span>@func.Key</span>
                                                                <span class="badge bg-primary">@func.Value</span>
                                                            </div>
                                                        </div>
                                                    }
                                                    @if (op.WithVehicleTruppCount > 0)
                                                    {
                                                        <div class="col-md-6 mb-2">
                                                            <div class="d-flex justify-content-between align-items-center">
                                                                <span>Trupp</span>
                                                                <span class="badge bg-secondary">@op.WithVehicleTruppCount</span>
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                            
                                            @if (op.NoVehicleFunctionCounts.Any(f => f.Value > 0) || op.WithoutVehicleTruppCount > 0)
                                            {
                                                <hr class="my-3" />
                                                <h6 class="mb-3">Funktionen (ohne Fahrzeug):</h6>
                                                <div class="row">
                                                    @foreach (var func in op.NoVehicleFunctionCounts.Where(f => f.Value > 0).OrderByDescending(f => f.Value))
                                                    {
                                                        <div class="col-md-6 mb-2">
                                                            <div class="d-flex justify-content-between align-items-center">
                                                                <span>@func.Key</span>
                                                                <span class="badge bg-warning text-dark">@func.Value</span>
                                                            </div>
                                                        </div>
                                                    }
                                                    @if (op.WithoutVehicleTruppCount > 0)
                                                    {
                                                        <div class="col-md-6 mb-2">
                                                            <div class="d-flex justify-content-between align-items-center">
                                                                <span>Trupp</span>
                                                                <span class="badge bg-secondary">@op.WithoutVehicleTruppCount</span>
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                            
                                            @if (!op.FunctionCounts.Any(f => f.Value > 0) && !op.NoVehicleFunctionCounts.Any(f => f.Value > 0) && op.WithVehicleTruppCount == 0 && op.WithoutVehicleTruppCount == 0)
                                            {
                                                <p class="text-muted mb-0">Keine Funktionen zugewiesen</p>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted">Keine Eins√§tze verf√ºgbar.</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">üë§ Mitglieder-Statistiken</h5>
                    </div>
                    <div class="card-body">
                        @if (_memberStats.Count == 0)
                        {
                            <p class="text-muted">Keine Daten verf√ºgbar</p>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Mitgliedsnummer</th>
                                            <th>Anwesenheit</th>
                                            <th>Eins√§tze</th>
                                            <th>Gesamt</th>
                                            <th>Letzte Teilnahme</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var member in _memberStats.Take(20))
                                        {
                                            <tr>
                                                <td><strong>@member.MemberName</strong></td>
                                                <td>@member.MemberNumber</td>
                                                <td>@member.TotalAttendance</td>
                                                <td>@member.TotalOperations</td>
                                                <td>@(member.TotalAttendance + member.TotalOperations)</td>
                                                <td>
                                                    @if (member.LastParticipation != DateTime.MinValue)
                                                    {
                                                        @member.LastParticipation.ToString("dd.MM.yyyy")
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">Nie</span>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

</AdminAuthCheck>

@code {
    private bool _loading = true;
    private ListStatistics _listStats = new();
    private List<TopParticipant> _topParticipants = new();
    private List<MemberStatistics> _memberStats = new();
    private List<VehicleStatistics> _vehicleStats = new();
    private List<FunctionStatistics> _functionStats = new();
    private BreathingApparatusStatistics _breathingStats = new();
    private List<OperationComposition> _opCompositionData = new();
    private List<KeywordStatistics> _keywordStats = new();
    private PersonalRequirementsStatistics _requirementsStats = new();
    private HashSet<string> _expandedOperations = new();
    private int _currentPage = 0;
    private int _pageSize = 10;
    private int _totalPages => _opCompositionData.Any() ? (int)Math.Ceiling(_opCompositionData.Count / (double)_pageSize) : 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadStatistics();
    }

    private async Task LoadStatistics()
    {
        _loading = true;
        StateHasChanged();

        try
        {
            _listStats = await StatsService.GetListStatisticsAsync();
            _topParticipants = await StatsService.GetTopParticipantsAsync(10);
            _memberStats = await StatsService.GetMemberStatisticsAsync();
            _vehicleStats = await StatsService.GetVehicleStatisticsAsync();
            _functionStats = await StatsService.GetFunctionStatisticsAsync();
            _breathingStats = await StatsService.GetBreathingApparatusStatisticsAsync();
            _opCompositionData = await StatsService.GetOperationCompositionAsync(100);
            _keywordStats = await StatsService.GetKeywordStatisticsAsync();
            _requirementsStats = await StatsService.GetPersonalRequirementsStatisticsAsync();
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void ToggleOperation(string operationNumber)
    {
        if (_expandedOperations.Contains(operationNumber))
        {
            _expandedOperations.Remove(operationNumber);
        }
        else
        {
            _expandedOperations.Add(operationNumber);
        }
    }

    private void NextPage()
    {
        if (_currentPage < _totalPages - 1)
        {
            _currentPage++;
        }
    }

    private void PreviousPage()
    {
        if (_currentPage > 0)
        {
            _currentPage--;
        }
    }

    private async Task ExportStatisticsPdf()
    {
        try
        {
            var path = "/api/export/statistics/pdf";
            var token = await CreateDownloadToken(path);
            var url = $"api/export/statistics/pdf?token={Uri.EscapeDataString(token)}";
            await OpenInNewTab(url);
        }
        catch (Exception)
        {
        }
    }

    private Task<string> CreateDownloadToken(string path)
    {
        var baseUri = Navigation.BaseUri.TrimEnd('/');
        var tokenEndpoint = $"{baseUri}/token?path={Uri.EscapeDataString(path)}";
        return FetchToken(tokenEndpoint);
    }

    private static async Task<string> FetchToken(string url)
    {
        using var http = new HttpClient();
        return await http.GetStringAsync(url);
    }

    private async Task OpenInNewTab(string relativeUrl)
    {
        var baseUri = Navigation.BaseUri.TrimEnd('/');
        var full = $"{baseUri}/{relativeUrl}";
        await JSRuntime.InvokeVoidAsync("window.open", full, "_blank");
    }

    private string GetProgressBarClass(double rate)
    {
        return rate switch
        {
            >= 80 => "bg-success",
            >= 60 => "bg-info",
            >= 40 => "bg-warning",
            _ => "bg-danger"
        };
    }

    private string GetProgressBarColor(double rate)
    {
        return rate switch
        {
            >= 80 => "#198754",
            >= 60 => "#0dcaf0",
            >= 40 => "#ffc107",
            _ => "#dc3545"
        };
    }

    private string GetRequirementsColor(double rate)
    {
        return rate switch
        {
            >= 90 => "#198754", // Gr√ºn f√ºr sehr gut
            >= 70 => "#20c997", // T√ºrkis f√ºr gut
            >= 50 => "#ffc107", // Gelb f√ºr mittel
            >= 30 => "#fd7e14", // Orange f√ºr schlecht
            _ => "#dc3545"      // Rot f√ºr sehr schlecht
        };
    }

    private string GetRequirementsStatusColor(double rate)
    {
        return rate switch
        {
            >= 90 => "text-success",
            >= 70 => "text-info",
            >= 50 => "text-warning",
            >= 30 => "text-warning",
            _ => "text-danger"
        };
    }

    private string GetRequirementsBadgeClass(double rate)
    {
        return rate switch
        {
            >= 90 => "bg-success",
            >= 70 => "bg-info",
            >= 50 => "bg-warning",
            >= 30 => "bg-warning",
            _ => "bg-danger"
        };
    }
}
