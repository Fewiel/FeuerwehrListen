@page "/attendance/{Id:int}"
@using FeuerwehrListen.Models
@using FeuerwehrListen.Services
@using FeuerwehrListen.Repositories
@using FeuerwehrListen.Components.Shared
@inject AttendanceListRepository AttendanceRepo
@inject AttendanceEntryRepository EntryRepo
@inject MemberRepository MemberRepo
@inject PdfExportService PdfService
@inject NavigationManager Navigation
@inject AuthenticationService AuthService
@rendermode InteractiveServer

<PageTitle>Anwesenheitsliste - @_list?.Title</PageTitle>

@if (_list != null)
{
    <div class="container mt-4">
        <div class="row mb-4">
            <div class="col">
                <h1>@_list.Title</h1>
                <p class="lead">@_list.Unit</p>
                <p>@_list.Description</p>
                <small class="text-muted">Erstellt: @_list.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small>
            </div>
            <div class="col-auto">
                @if (_list.Status == ListStatus.Open)
                {
                    <button class="btn btn-warning me-2" @onclick="CloseList">Liste abschlie√üen</button>
                }
                else
                {
                    <span class="badge bg-secondary fs-5 me-2">Abgeschlossen</span>
                }
                <button class="btn btn-primary" @onclick="ExportPdf">
                    <i class="bi bi-file-earmark-pdf"></i> PDF Export
                </button>
            </div>
        </div>

        @if (_list.Status == ListStatus.Open)
        {
            <div class="row mb-4">
                <div class="col">
                    <button class="btn btn-primary btn-lg" @onclick="ShowNumpad">
                        <i class="bi bi-plus-circle"></i> Mitglied eintragen
                    </button>
                </div>
            </div>
        }

        <Numpad @ref="_numpad" OnInput="HandleNumpadInput" OnSearchByName="ShowMemberSelectionModal" />
        <MemberSelectionModal @ref="_memberSelectionModal" OnMemberSelected="HandleMemberSelection" />

        <div class="row">
            <div class="col">
                @{
                    var presentEntries = _entries.Where(e => !e.IsExcused).ToList();
                    var excusedEntries = _entries.Where(e => e.IsExcused).ToList();
                }
                
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Anwesend (@presentEntries.Count)</h5>
                    </div>
                    <div class="card-body">
                        @if (presentEntries.Count == 0)
                        {
                            <p class="text-muted">Noch keine Eintr√§ge</p>
                        }
                        else
                        {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Name/ID</th>
                                        <th>Eingetragen um</th>
                                            @if (_list.Status == ListStatus.Open && AuthService.IsAdmin)
                                            {
                                                <th>Aktion</th>
                                            }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var (entry, index) in presentEntries.Select((e, i) => (e, i)))
                                    {
                                        <tr>
                                            <td>@(index + 1)</td>
                                            <td><strong>@entry.NameOrId</strong></td>
                                            <td>@entry.EnteredAt.ToString("HH:mm:ss")</td>
                                            @if (_list.Status == ListStatus.Open && AuthService.IsAdmin)
                                            {
                                                <td>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteEntry(entry.Id)" title="Entfernen">
                                                        üóëÔ∏è Entfernen
                                                    </button>
                                                </td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        }
                    </div>
                </div>

                @if (excusedEntries.Count > 0)
                {
                    <div class="card mt-3">
                        <div class="card-header">
                            <h5 class="mb-0">Entschuldigt (@excusedEntries.Count)</h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>#</th>
                                            <th>Name/ID</th>
                                            <th>Eingetragen um</th>
                                            @if (_list.Status == ListStatus.Open && AuthService.IsAdmin)
                                            {
                                                <th>Aktion</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var (entry, index) in excusedEntries.Select((e, i) => (e, i)))
                                        {
                                            <tr>
                                                <td>@(index + 1)</td>
                                                <td><strong>@entry.NameOrId</strong></td>
                                                <td>@entry.EnteredAt.ToString("HH:mm:ss")</td>
                                                @if (_list.Status == ListStatus.Open && AuthService.IsAdmin)
                                                {
                                                    <td>
                                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteEntry(entry.Id)" title="Entfernen">
                                                            üóëÔ∏è Entfernen
                                                        </button>
                                                    </td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="row mt-3">
            <div class="col">
                <button class="btn btn-secondary" @onclick='() => Navigation.NavigateTo("/")'>Zur√ºck zur √úbersicht</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private AttendanceList? _list;
    private List<AttendanceEntry> _entries = new();
    private string _combinedInput = string.Empty;
    private string _errorMessage = string.Empty;
    private bool _isExcused = false;
    private ElementReference _inputElement;
    private List<Member> _suggestions = new();
    private bool _showSuggestions = false;
    private CancellationTokenSource? _searchCts;
    private Numpad? _numpad;
    private MemberSelectionModal? _memberSelectionModal;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _list = await AttendanceRepo.GetByIdAsync(Id);
        if (_list != null)
        {
            _entries = await EntryRepo.GetByListIdAsync(Id);
        }
    }

    private async Task AddEntry()
    {
        if (_list?.Status != ListStatus.Open)
            return;

        _errorMessage = string.Empty;
        
        if (string.IsNullOrWhiteSpace(_combinedInput))
            return;

        string input = _combinedInput;
        
        // Wenn es ein Name mit ID in Klammern ist, extrahiere die ID
        var openIdx = input.LastIndexOf('(');
        var closeIdx = input.LastIndexOf(')');
        if (openIdx >= 0 && closeIdx > openIdx)
        {
            var inside = input.Substring(openIdx + 1, closeIdx - openIdx - 1).Trim();
            if (!string.IsNullOrEmpty(inside))
            {
                var byNum = await MemberRepo.GetByMemberNumberAsync(inside);
                if (byNum != null)
                {
                    input = inside;
                }
            }
        }

        var member = await MemberRepo.FindByNameOrNumberAsync(input);
        if (member == null)
        {
            _errorMessage = $"Mitglied nicht gefunden!";
            return;
        }

        // Nur Admins k√∂nnen als entschuldigt eintragen
        var isExcused = AuthService.IsAdmin && _isExcused;

        var entry = new AttendanceEntry
        {
            AttendanceListId = Id,
            NameOrId = $"{member.FirstName} {member.LastName} ({member.MemberNumber})",
            EnteredAt = DateTime.Now,
            IsExcused = isExcused
        };

        await EntryRepo.CreateAsync(entry);
        _combinedInput = string.Empty;
        _isExcused = false;
        _showSuggestions = false;
        await LoadData();
    }

    private void ShowNumpad()
    {
        _numpad?.Show();
    }
    
    private void ShowMemberSelectionModal()
    {
        _memberSelectionModal?.Show();
    }
    
    private async Task HandleNumpadInput(string input)
    {
        if (int.TryParse(input, out _))
        {
            var member = await MemberRepo.GetByMemberNumberAsync(input);
            if (member != null)
            {
                await HandleMemberSelection(member.Id);
                return;
            }
        }
        
        var members = await MemberRepo.SearchAsync(input);
        if (members.Count == 1)
        {
            SelectSuggestion(members.First());
            await AddEntry();
        }
        else if (members.Count > 1)
        {
            _memberSelectionModal?.Show(members);
        }
        else
        {
            _errorMessage = "Mitglied nicht gefunden!";
        }
    }
    
    private async Task HandleMemberSelection(int memberId)
    {
        var member = await MemberRepo.GetByIdAsync(memberId);
        if (member != null)
        {
            SelectSuggestion(member);
            await AddEntry();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddEntry();
        }
    }

    private async Task OnCombinedInput(ChangeEventArgs e)
    {
        _combinedInput = e.Value?.ToString() ?? string.Empty;
        _showSuggestions = false;
        _searchCts?.Cancel();
        _searchCts = new CancellationTokenSource();
        var token = _searchCts.Token;
        try
        {
            await Task.Delay(200, token);
            if (token.IsCancellationRequested) return;
            if (string.IsNullOrWhiteSpace(_combinedInput) || _combinedInput.Length < 2)
            {
                _suggestions.Clear();
                return;
            }
            var results = await MemberRepo.SearchAsync(_combinedInput, 10);
            if (!token.IsCancellationRequested)
            {
                _suggestions = results;
                _showSuggestions = _suggestions.Count > 0;
                StateHasChanged();
            }
        }
        catch { }
    }

    private void SelectSuggestion(Member m)
    {
        _combinedInput = $"{m.FirstName} {m.LastName} ({m.MemberNumber})";
        _showSuggestions = false;
        _memberSelectionModal?.Hide();
    }

    private void OnDigitEntered(string digit)
    {
        _combinedInput += digit;
        _showSuggestions = false;
    }

    private void ClearInput()
    {
        _combinedInput = string.Empty;
        _showSuggestions = false;
    }

    private async Task DeleteEntry(int entryId)
    {
        if (_list?.Status != ListStatus.Open)
            return;

        try
        {
            await EntryRepo.DeleteAsync(entryId);
            _errorMessage = string.Empty;
            await LoadData();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Fehler beim L√∂schen: {ex.Message}";
        }
    }

    private async Task CloseList()
    {
        if (_list == null) return;

        _list.Status = ListStatus.Closed;
        _list.ClosedAt = DateTime.Now;
        await AttendanceRepo.UpdateAsync(_list);
        await LoadData();
    }

    private async Task ExportPdf()
    {
        try
        {
            var path = $"/api/export/attendance/{_list.Id}/pdf";
            var token = await CreateDownloadToken(path);
            var url = $"api/export/attendance/{_list.Id}/pdf?token={Uri.EscapeDataString(token)}";
            await OpenInNewTab(url);
        }
        catch (Exception ex)
        {
        }
    }

    private Task<string> CreateDownloadToken(string path)
    {
        var baseUri = Navigation.BaseUri.TrimEnd('/');
        var tokenEndpoint = $"{baseUri}/token?path={Uri.EscapeDataString(path)}";
        return FetchToken(tokenEndpoint);
    }

    private static async Task<string> FetchToken(string url)
    {
        using var http = new HttpClient();
        return await http.GetStringAsync(url);
    }

    [Inject] private IJSRuntime JS { get; set; } = default!;
    private async Task OpenInNewTab(string relativeUrl)
    {
        var baseUri = Navigation.BaseUri.TrimEnd('/');
        var full = $"{baseUri}/{relativeUrl}";
        await JS.InvokeVoidAsync("window.open", full, "_blank");
    }
}

