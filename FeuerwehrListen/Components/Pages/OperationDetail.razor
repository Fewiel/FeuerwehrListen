@page "/operation/{Id:int}"
@using FeuerwehrListen.Components.Shared
@using FeuerwehrListen.Models
@using FeuerwehrListen.Services
@using FeuerwehrListen.Repositories
@inject OperationListRepository OperationRepo
@inject OperationEntryRepository EntryRepo
@inject VehicleRepository VehicleRepo
@inject OperationFunctionRepository FunctionRepo
@inject OperationEntryFunctionRepository EntryFunctionRepo
@inject MemberRepository MemberRepo
@inject PdfExportService PdfService
@inject NavigationManager Navigation
@inject GeocodingService Geocoder
@inject KeywordRepository KeywordRepo
@inject PersonalRequirementsService RequirementsService
@rendermode InteractiveServer

<PageTitle>Einsatzliste - @_list?.OperationNumber</PageTitle>

@if (_list != null)
{
    <div class="container mt-4">
        <div class="row mb-3">
            <div class="col text-end">
                @if (_list.Status == ListStatus.Open)
                {
                    <button class="btn btn-warning me-2" @onclick="CloseList">Liste abschließen</button>
                }
                else
                {
                    <span class="badge bg-secondary fs-5 me-2">Abgeschlossen</span>
                }
                <button class="btn btn-outline-primary me-2" @onclick="() => _editOpen = true">
                    <i class="bi bi-pencil-square"></i> Einsatz bearbeiten
                </button>
                <button class="btn btn-primary" @onclick="ExportPdf">
                    <i class="bi bi-file-earmark-pdf"></i> PDF Export
                </button>
            </div>
        </div>
        
        <div class="row mb-4">
            <div class="col">
                <h1>Einsatz @_list.OperationNumber</h1>
                <p class="lead">Stichwort: @_list.Keyword</p>
                
                @if (_requirementsValidation != null)
                {
                    <div class="alert @(_requirementsValidation.IsValid ? "alert-success" : "alert-info") mb-3">
                        <h6 class="alert-heading">
                            <i class="bi @(_requirementsValidation.IsValid ? "bi-check-circle" : "bi-info-circle")"></i>
                            Personal Requirements Status
                        </h6>
                        @if (_requirementsValidation.IsValid)
                        {
                            <p class="mb-0">✅ Alle Personal Requirements sind erfüllt!</p>
                        }
                        else
                        {
                            <p class="mb-2">ℹ️ <strong>Information:</strong> Folgende Personal Requirements sind definiert, aber nicht vollständig erfüllt:</p>
                            <ul class="mb-0">
                                @foreach (var missing in _requirementsValidation.MissingRequirements)
                                {
                                    <li>
                                        <strong>@missing.FunctionName:</strong> 
                                        @missing.CurrentCount von @missing.RequiredCount erforderlich
                                        @if (missing.IsRequired)
                                        {
                                            <span class="text-warning">(Empfohlen)</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">(Optional)</span>
                                        }
                                    </li>
                                }
                            </ul>
                            <small class="text-muted mt-2 d-block">
                                <i class="bi bi-info-circle"></i> 
                                Dies ist nur eine Information. Der Einsatz kann trotzdem abgeschlossen werden.
                            </small>
                        }
                    </div>
                }
                
                <p>Alarmierung: @_list.AlertTime.ToString("dd.MM.yyyy HH:mm")</p>
                <small class="text-muted">Erstellt: @_list.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small>
            </div>
        </div>

        @if (_list.Status == ListStatus.Open)
        {
            <div class="row mb-4">
                <div class="col">
                    <button class="btn btn-primary btn-lg" @onclick="ShowNumpad">
                        <i class="bi bi-plus-circle"></i> Einsatzkraft eintragen
                    </button>
                </div>
            </div>
        }

        <Numpad @ref="_numpad" OnInput="HandleNumpadInput" OnSearchByName="ShowMemberSelectionModal" />
        <MemberSelectionModal @ref="_memberSelectionModal" OnMemberSelected="HandleMemberSelection" />

        <VehicleSelectionModal Vehicles="_vehicles" 
                               OnVehicleSelected="OnVehicleSelected" 
                               OnModalClosed="OnVehicleModalClosed" 
                               @ref="_vehicleModal" />
        
        <FunctionSelectionModal Functions="_allFunctions" 
                               OnFunctionsSelected="OnFunctionsSelected" 
                               OnModalClosed="OnFunctionModalClosed"
                               OnBackClicked="OnFunctionBackClicked" 
                               @ref="_functionModal" />
        
        <EntryOverviewModal OnEntryConfirmed="AddEntry" 
                           OnModalClosed="OnOverviewModalClosed" 
                           @ref="_overviewModal" />

        <div class="row">
            <div class="col">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Eingetragene Einsatzkräfte (@_entries.Count)</h5>
                    </div>
                    <div class="card-body">
                        @if (!string.IsNullOrWhiteSpace(_list?.Address))
                        {
                            <div class="mb-3">
                                <strong>Adresse:</strong> @_list.Address
                            </div>
                        }
                        @if (_entries.Count == 0)
                        {
                            <p class="text-muted">Noch keine Einträge</p>
                        }
                        else
                        {
                            var vehicleGroups = _entries.Where(e => !string.IsNullOrWhiteSpace(e.Vehicle))
                                .GroupBy(e => e.Vehicle)
                                .OrderBy(g => g.Key);

                            foreach (var vehicleGroup in vehicleGroups)
                            {
                                <div class="mb-4">
                                    <h6 class="text-danger fw-bold mb-3">
                                        @vehicleGroup.Key (@vehicleGroup.Count())
                                    </h6>
                                    <div class="table-responsive">
                                        <table class="table table-hover table-sm">
                                            <thead>
                                                <tr>
                                                    <th>#</th>
                                                    <th>Name/ID</th>
                                                    <th>Funktionen</th>
                                                    <th>Unter Atemschutz</th>
                                                    <th>Eingetragen um</th>
                                                    @if (_list.Status == ListStatus.Open)
                                                    {
                                                        <th>Aktion</th>
                                                    }
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var (entry, index) in vehicleGroup.Select((e, i) => (e, i)))
                                                {
                                                    var funcs = _functionsByEntryId.TryGetValue(entry.Id, out var list)
                                                        ? string.Join(", ", list.Select(x => x.Name))
                                                        : GetFunctionName(entry.Function);
                                                    <tr>
                                                        <td>@(index + 1)</td>
                                                        <td><strong>@entry.NameOrId</strong></td>
                                                        <td>@funcs</td>
                                                        <td>
                                                            @if (entry.WithBreathingApparatus)
                                                            {
                                                                <span class="badge bg-warning">Ja</span>
                                                            }
                                                            else
                                                            {
                                                                <span class="badge bg-secondary">Nein</span>
                                                            }
                                                        </td>
                                                        <td>@entry.EnteredAt.ToString("HH:mm:ss")</td>
                                                        @if (_list.Status == ListStatus.Open)
                                                        {
                                                            <td>
                                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteEntry(entry.Id)" title="Entfernen">
                                                                    🗑️
                                                                </button>
                                                            </td>
                                                        }
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            }

                            var noVehicleEntries = _entries.Where(e => string.IsNullOrWhiteSpace(e.Vehicle)).ToList();
                            if (noVehicleEntries.Count > 0)
                            {
                                <div class="mb-4">
                                    <h6 class="text-danger fw-bold mb-3">
                                        <i class="bi bi-people"></i> Ohne Fahrzeug (@noVehicleEntries.Count)
                                    </h6>
                                    <div class="table-responsive">
                                        <table class="table table-hover table-sm">
                                            <thead>
                                                <tr>
                                                    <th>#</th>
                                                    <th>Name/ID</th>
                                                    <th>Funktionen</th>
                                                    <th>Unter Atemschutz</th>
                                                    <th>Eingetragen um</th>
                                                    @if (_list.Status == ListStatus.Open)
                                                    {
                                                        <th>Aktion</th>
                                                    }
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var (entry, index) in noVehicleEntries.Select((e, i) => (e, i)))
                                                {
                                                    var funcs = _functionsByEntryId.TryGetValue(entry.Id, out var list)
                                                        ? string.Join(", ", list.Select(x => x.Name))
                                                        : GetFunctionName(entry.Function);
                                                    <tr>
                                                        <td>@(index + 1)</td>
                                                        <td><strong>@entry.NameOrId</strong></td>
                                                        <td>@funcs</td>
                                                        <td>
                                                            @if (entry.WithBreathingApparatus)
                                                            {
                                                                <span class="badge bg-warning">Ja</span>
                                                            }
                                                            else
                                                            {
                                                                <span class="badge bg-secondary">Nein</span>
                                                            }
                                                        </td>
                                                        <td>@entry.EnteredAt.ToString("HH:mm:ss")</td>
                                                        @if (_list.Status == ListStatus.Open)
                                                        {
                                                            <td>
                                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteEntry(entry.Id)" title="Entfernen">
                                                                    🗑️
                                                                </button>
                                                            </td>
                                                        }
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-3">
            <div class="col">
                <button class="btn btn-secondary" @onclick='() => Navigation.NavigateTo("/")'>Zurück zur Übersicht</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private OperationList? _list;
    private List<OperationEntry> _entries = new();
    private List<Vehicle> _vehicles = new();
    private string _searchInput = string.Empty;
    private string _memberIdInput = string.Empty;
    private string _errorMessage = string.Empty;
    private Vehicle? _selectedVehicle = null;
    private bool _noVehicle = false;
    private OperationFunction _function = OperationFunction.Trupp;
    private bool _withBreathingApparatus = false;
    private ElementReference _inputElement;
    private ElementReference _searchElement;
    private List<OperationFunctionDef> _allFunctions = new();
    private HashSet<int> _selectedFunctionIds = new();
    private Dictionary<int, List<OperationFunctionDef>> _functionsByEntryId = new();
    private string _address = string.Empty;
    private bool _editOpen = false;
    private string _editOperationNumber = string.Empty;
    private string _editKeyword = string.Empty;
    private string _editAddress = string.Empty;
    private int? _editKeywordId = null;
    private List<Keyword> _availableKeywords = new();
    private PersonalRequirementsValidationResult? _requirementsValidation = null;
    private bool _geocodingInProgress = false;
    private List<Member> _suggestions = new();
    private bool _showSuggestions = false;
    private CancellationTokenSource? _searchCts;
    private Member? _selectedMember = null;
    private VehicleSelectionModal? _vehicleModal;
    private FunctionSelectionModal? _functionModal;
    private EntryOverviewModal? _overviewModal;
    private Numpad? _numpad;
    private MemberSelectionModal? _memberSelectionModal;
    
    private bool CanSubmit => _list?.Status == ListStatus.Open
        && _selectedMember != null
        && (_noVehicle || _selectedVehicle != null);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        _vehicles = await VehicleRepo.GetActiveAsync();
        _allFunctions = await FunctionRepo.GetAllAsync();
        _availableKeywords = await KeywordRepo.GetAllAsync();
        await LoadFunctionMap();
    }

    private async Task LoadData()
    {
        _list = await OperationRepo.GetByIdAsync(Id);
        if (_list != null)
        {
            _entries = await EntryRepo.GetByListIdAsync(Id);
            _address = _list.Address ?? string.Empty;
            _editOperationNumber = _list.OperationNumber;
            _editKeyword = _list.Keyword;
            _editAddress = _list.Address ?? string.Empty;
            _editKeywordId = _list.KeywordId;
            
            // Load requirements validation
            await LoadRequirementsValidation();
        }
    }

    private async Task LoadFunctionMap()
    {
        var ids = _entries.Select(e => e.Id).ToList();
        _functionsByEntryId = await EntryFunctionRepo.GetFunctionsForEntriesAsync(ids);
        StateHasChanged();
    }

    private async Task LoadRequirementsValidation()
    {
        if (_list?.KeywordId.HasValue == true)
        {
            _requirementsValidation = await RequirementsService.ValidateRequirementsAsync(_list.Id, _list.KeywordId.Value);
        }
        else
        {
            _requirementsValidation = null;
        }
    }

    private async Task AddEntry((string memberName, string vehicleName, List<string> functionNames, bool withBreathingApparatus) data)
    {
        if (_list?.Status != ListStatus.Open || _selectedMember == null)
            return;

        try
        {
            var displayName = $"{_selectedMember.FirstName} {_selectedMember.LastName} ({_selectedMember.MemberNumber})";
            var vehicleName = _noVehicle ? "Ohne Fahrzeug" : _selectedVehicle?.Name ?? string.Empty;
            
            var entry = new OperationEntry
            {
                OperationListId = _list.Id,
                NameOrId = displayName,
                Vehicle = vehicleName,
                Function = OperationFunction.Trupp,
                WithBreathingApparatus = data.withBreathingApparatus,
                EnteredAt = DateTime.Now
            };

            var newId = await EntryRepo.CreateAsync(entry);

            if (_selectedFunctionIds.Count > 0)
            {
                await EntryFunctionRepo.SetFunctionsForEntryAsync(newId, _selectedFunctionIds);
            }

            _selectedMember = null;
            _selectedVehicle = null;
            _noVehicle = false;
            _selectedFunctionIds.Clear();
            _withBreathingApparatus = false;
            _memberIdInput = string.Empty;
            _searchInput = string.Empty;
            _errorMessage = string.Empty;

            await LoadData();
            await LoadFunctionMap();
            await LoadRequirementsValidation();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Fehler beim Eintragen: {ex.Message}";
        }
    }

    private void ResetForm()
    {
        _searchInput = string.Empty;
        _memberIdInput = string.Empty;
        _selectedMember = null;
        _selectedVehicle = null;
        _noVehicle = false;
        _function = OperationFunction.Trupp;
        _withBreathingApparatus = false;
        _selectedFunctionIds.Clear();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (!string.IsNullOrWhiteSpace(_memberIdInput))
            {
                await ShowVehicleModal();
            }
        }
    }

    private async Task PerformSearch()
    {
        _showSuggestions = false;
        _searchCts?.Cancel();
        _searchCts = new CancellationTokenSource();
        var token = _searchCts.Token;
        try
        {
            await Task.Delay(200, token);
            if (token.IsCancellationRequested) return;
            if (string.IsNullOrWhiteSpace(_searchInput) || _searchInput.Length < 2)
            {
                _suggestions.Clear();
                return;
            }
            var results = await MemberRepo.SearchAsync(_searchInput, 10);
            if (!token.IsCancellationRequested)
            {
                _suggestions = results;
                _showSuggestions = _suggestions.Count > 0;
                StateHasChanged();
            }
        }
        catch { }
    }

    private async Task SelectSuggestion(Member m)
    {
        _memberIdInput = m.MemberNumber;
        _selectedMember = m;
        _showSuggestions = false;
        _searchInput = string.Empty;
        
        // Direkt zur Fahrzeugauswahl
        await ShowVehicleModal();
    }

    private void OnDigitEntered(string digit)
    {
        _memberIdInput += digit;
        _searchInput = string.Empty;
        _showSuggestions = false;
    }

    private async Task OnCombinedInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        _memberIdInput = input;
        
        // Prüfen ob es eine reine Zahl ist (ID) oder Text (Name)
        if (int.TryParse(input, out _))
        {
            // Reine Zahl - ID-Eingabe
            _searchInput = string.Empty;
            _showSuggestions = false;
        }
        else if (!string.IsNullOrWhiteSpace(input) && input.Length >= 2)
        {
            // Text - Namenssuche
            _searchInput = input;
            await PerformSearch();
        }
        else
        {
            _searchInput = string.Empty;
            _showSuggestions = false;
        }
    }

    private void ClearMemberId()
    {
        _memberIdInput = string.Empty;
        _searchInput = string.Empty;
        _selectedMember = null;
        _showSuggestions = false;
    }

    private async Task ShowVehicleModal()
    {
        if (_selectedMember == null)
            return;
            
        _vehicleModal?.ShowModal();
    }


    private async Task OnVehicleSelected(int? vehicleId)
    {
        if (vehicleId.HasValue)
        {
            _selectedVehicle = _vehicles.FirstOrDefault(v => v.Id == vehicleId.Value);
            _noVehicle = false;
        }
        else
        {
            _selectedVehicle = null;
            _noVehicle = true;
        }
        
        // Nach Fahrzeugauswahl direkt zur Funktionsauswahl
        _functionModal?.ShowModal(_selectedFunctionIds);
        StateHasChanged();
    }

    private void OnVehicleModalClosed()
    {
        StateHasChanged();
    }

    private async Task OnFunctionsSelected(HashSet<int> selectedIds)
    {
        _selectedFunctionIds = selectedIds;
        
        // Nach Funktionsauswahl zur Übersicht
        var functionNames = _allFunctions
            .Where(f => selectedIds.Contains(f.Id))
            .Select(f => f.Name)
            .ToList();
            
        var vehicleName = _noVehicle ? "Ohne Fahrzeug" : _selectedVehicle?.Name ?? "Unbekannt";
        var memberName = $"{_selectedMember?.FirstName} {_selectedMember?.LastName}";
        
        _overviewModal?.ShowModal(memberName, vehicleName, functionNames, _withBreathingApparatus);
        StateHasChanged();
    }

    private void OnFunctionModalClosed()
    {
        StateHasChanged();
    }

    private void OnFunctionBackClicked()
    {
        _vehicleModal?.ShowModal();
        StateHasChanged();
    }

    private void OnOverviewModalClosed()
    {
        StateHasChanged();
    }

    private async Task DeleteEntry(int entryId)
    {
        if (_list?.Status != ListStatus.Open)
            return;

        try
        {
            await EntryRepo.DeleteAsync(entryId);
            await LoadData();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Fehler beim Löschen: {ex.Message}";
        }
    }

    private async Task CloseList()
    {
        if (_list == null) return;

        _list.Address = string.IsNullOrWhiteSpace(_address) ? null : _address.Trim();
        _list.Status = ListStatus.Closed;
        _list.ClosedAt = DateTime.Now;
        await OperationRepo.UpdateAsync(_list);
        await LoadData();
    }

    private async Task SaveAddress()
    {
        if (_list == null) return;
        _list.Address = string.IsNullOrWhiteSpace(_address) ? null : _address.Trim();
        await OperationRepo.UpdateAsync(_list);
        await LoadData();
    }

    private async Task SaveEdit()
    {
        if (_list == null) return;
        
        try
        {
            _list.OperationNumber = _editOperationNumber?.Trim() ?? string.Empty;
            _list.KeywordId = _editKeywordId;
            
            // Update the keyword text field based on selected keyword
            if (_editKeywordId.HasValue)
            {
                var selectedKeyword = _availableKeywords.FirstOrDefault(k => k.Id == _editKeywordId.Value);
                _list.Keyword = selectedKeyword?.Name ?? string.Empty;
            }
            else
            {
                _list.Keyword = string.Empty;
            }
            
            _list.Address = string.IsNullOrWhiteSpace(_editAddress) ? null : _editAddress.Trim();
            if (!string.IsNullOrWhiteSpace(_list.Address))
            {
                _geocodingInProgress = true;
                var (lat, lon) = await Geocoder.GeocodeAsync(_list.Address);
                _list.Latitude = lat;
                _list.Longitude = lon;
                _geocodingInProgress = false;
            }
            else
            {
                _list.Latitude = null;
                _list.Longitude = null;
            }
                await OperationRepo.UpdateAsync(_list);
                _editOpen = false;
                await LoadData();
                await LoadRequirementsValidation();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Fehler beim Speichern: {ex.Message}";
        }
    }

    private async Task ExportPdf()
    {
        try
        {
            var path = $"/api/export/operation/{_list.Id}/pdf";
            var token = await CreateDownloadToken(path);
            var url = $"api/export/operation/{_list.Id}/pdf?token={Uri.EscapeDataString(token)}";
            await OpenInNewTab(url);
        }
        catch (Exception ex)
        {
        }
    }

    private Task<string> CreateDownloadToken(string path)
    {
        var baseUri = Navigation.BaseUri.TrimEnd('/');
        var tokenEndpoint = $"{baseUri}/token?path={Uri.EscapeDataString(path)}";
        return FetchToken(tokenEndpoint);
    }

    private static async Task<string> FetchToken(string url)
    {
        using var http = new HttpClient();
        return await http.GetStringAsync(url);
    }

    [Inject] private IJSRuntime JS { get; set; } = default!;
    private async Task OpenInNewTab(string relativeUrl)
    {
        var baseUri = Navigation.BaseUri.TrimEnd('/');
        var full = $"{baseUri}/{relativeUrl}";
        await JS.InvokeVoidAsync("window.open", full, "_blank");
    }

    private string GetFunctionName(OperationFunction function) => function switch
    {
        OperationFunction.Maschinist => "Maschinist",
        OperationFunction.Gruppenfuehrer => "Gruppenführer",
        OperationFunction.Trupp => "Trupp",
        _ => "Unbekannt"
    };

    private string GetOsmEmbedUrl(string address)
    {
        var encoded = Uri.EscapeDataString(address);
        return $"https://www.openstreetmap.org/export/embed.html?search={encoded}&layer=mapnik";
    }
    private string GetOsmEmbedUrlWithMarker(string address, double? lat, double? lon)
    {
        if (lat.HasValue && lon.HasValue)
        {
            var latVal = lat.Value;
            var lonVal = lon.Value;
            var latDelta = 0.012;
            var lonDelta = 0.018;
            var minLat = (latVal - latDelta).ToString(System.Globalization.CultureInfo.InvariantCulture);
            var maxLat = (latVal + latDelta).ToString(System.Globalization.CultureInfo.InvariantCulture);
            var minLon = (lonVal - lonDelta).ToString(System.Globalization.CultureInfo.InvariantCulture);
            var maxLon = (lonVal + lonDelta).ToString(System.Globalization.CultureInfo.InvariantCulture);
            var latitude = latVal.ToString(System.Globalization.CultureInfo.InvariantCulture);
            var longitude = lonVal.ToString(System.Globalization.CultureInfo.InvariantCulture);
            return $"https://www.openstreetmap.org/export/embed.html?layer=mapnik&marker={latitude}%2C{longitude}&bbox={minLon}%2C{minLat}%2C{maxLon}%2C{maxLat}";
        }
        return GetOsmEmbedUrl(address);
    }

    private void ShowNumpad()
    {
        _numpad?.Show();
    }
    
    private void ShowMemberSelectionModal()
    {
        _memberSelectionModal?.Show();
    }

    private async Task HandleNumpadInput(string input)
    {
        if (int.TryParse(input, out _))
        {
            var member = await MemberRepo.GetByMemberNumberAsync(input);
            if (member != null)
            {
                await HandleMemberSelection(member.Id);
                return;
            }
        }
        
        var members = await MemberRepo.SearchAsync(input);
        if (members.Count == 1)
        {
            await HandleMemberSelection(members.First().Id);
        }
        else if (members.Count > 1)
        {
            _memberSelectionModal?.Show(members);
        }
        else
        {
            _errorMessage = "Mitglied nicht gefunden!";
        }
    }

    private async Task HandleMemberSelection(int memberId)
    {
        var member = await MemberRepo.GetByIdAsync(memberId);
        if (member != null)
        {
            _selectedMember = member;
            _vehicleModal?.ShowModal();
        }
    }
}

@if (_editOpen && _list != null)
{
    <div class="modal fade show" style="display:block; background: rgba(0,0,0,.35);" tabindex="-1" role="dialog" data-bs-theme="dark">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-content bg-dark text-light border-secondary">
                <div class="modal-header border-secondary">
                    <h5 class="modal-title">Einsatz bearbeiten</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => _editOpen = false"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Einsatznummer</label>
                        <input type="text" class="form-control bg-dark text-light border-secondary" @bind="_editOperationNumber" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Stichwort</label>
                        <select class="form-select bg-dark text-light border-secondary" @bind="_editKeywordId">
                            <option value="">Kein Stichwort ausgewählt</option>
                            @foreach (var keyword in _availableKeywords.Where(k => k.IsActive))
                            {
                                <option value="@keyword.Id">@keyword.Name</option>
                            }
                        </select>
                        <div class="form-text">Das Stichwort bestimmt die Personal Requirements für diesen Einsatz.</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Adresse</label>
                        <input type="text" class="form-control bg-dark text-light border-secondary" @bind="_editAddress" placeholder="Straße Hausnummer, PLZ Ort" />
                    </div>
                </div>
                <div class="modal-footer border-secondary">
                    <button class="btn btn-secondary" @onclick="() => _editOpen = false">Abbrechen</button>
                    <button class="btn btn-primary" @onclick="SaveEdit">Speichern</button>
                </div>
            </div>
        </div>
    </div>
}
